# -*- coding: utf-8 -*-
"""transform_test

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i6QBu0PhLmWwLbNo8jKhECea_Ea8BPfD
"""

import pandas as pd
import unittest
from utils.transform_data.transform import transform_data

class TestTransform(unittest.TestCase):

  def test_data_valid_transform(self):
    # Menguji Keberhasilan Transformasi Data dengan Menggunakan Data yang Valid
    data = [
      {"Title": "Product A", "Price": "20", "Rating": "3.5", "Colors": "5", "Size": "L", "Gender": "Male"},
      {"Title": "Product B", "Price": "50", "Rating": "4.5", "Colors": "3", "Size": "M", "Gender": "Female"},
    ]
    df = transform_data(data)

    data_expected = {
        "Title": ["Product A", "Product B"],
        "Price": [20 * 16000, 50 * 16000],
        "Rating": [3.5, 4.5],
        "Colors": [5, 3],
        "Size": ["L", "M"],
        "Gender": ["Male", "Female"]
    }
    df_expected = pd.DataFrame(data_expected)

    pd.testing.assert_frame_equal(df, df_expected, check_dtype=False)

  def test_data_invalid_transform(self):
    # Menguji Kegagalan Transformasi Data dengan Menggunakan Data yang Invalid
    data = [{"Title": "Product A", "Price": "Price Unavailable", "Rating": "Invalid Rating", "Colors": "Colors Unavailable"}]
    df = transform_data(data)
    self.assertEqual(len(df), 0)

  def test_data_partial_invalid_transform(self):
    # Menguji Transformasi Data Apakah Baris Data yang Valid saja yang Masuk ke dalam DataFrame
    data = [
        {"Title": "Product A", "Price": "20", "Rating": "3.5", "Colors": "5", "Size": "L", "Gender": "Male"},
        {"Title": "Product B", "Price": "Price Unavailable", "Rating": "Invalid Rating", "Colors": "Colors Unavailable"}
    ]
    df = transform_data(data)
    self.assertEqual(len(df), 1)
    self.assertEqual(df.iloc[0]["Title"], "Product A")

  def test_price_invalid_transform(self):
    # Menguji Transformasi Data Apakah Data yang Harganya Invalid akan tetap Digunakan atau Tidak
    data = [{"Title": "Product A", "Price": "Price Unavailable", "Rating": "3.5", "Colors": "5", "Size": "L", "Gender": "Male"}]
    df = transform_data(data)
    self.assertEqual(len(df), 0)

  def test_data_empty_transform(self):
    # Menguji Transformasi Data Apakah Fungsi Mampu Menangani Input Kosong dengan Tanpa Eror
    df = transform_data([])
    self.assertTrue(isinstance(df, pd.DataFrame))
    self.assertEqual(len(df), 0)

  def test_data_none_transform(self):
    # Menguji Transformasi Data Apakah Fungsi Mampu Menangani None sebagai Input dengan Tanpa Eror
    df = transform_data(None)
    self.assertTrue(isinstance(df, pd.DataFrame))
    self.assertEqual(len(df), 0)

if __name__ == "__main__":
  unittest.main()