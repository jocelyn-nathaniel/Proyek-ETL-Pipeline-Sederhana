# -*- coding: utf-8 -*-
"""extract_test

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bWbhAWYeMdVxpTWx3MuIvep9qJqogV13
"""

import requests
import unittest
from unittest.mock import patch
from utils.extract_data.extract import scrape_page

class TestExtract(unittest.TestCase):

  @patch("utils.extract_data.extract.requests.get")
  def test_succeeded_page_scrape(self, mock_get):
    # Menguji Scraping Data dengan HTML yang Valid
    mock_get.return_value.status_code = 200
    mock_get.return_value.text = """
      <div class="collection-card">
        <h3 class="product-title">Product Test</h3>
        <span class="price">$20</span>
        <p>Rating: ‚≠ê 3.5</p>
        <p>Colors: 5 Colors</p>
        <p>Size: L</p>
        <p>Gender: Male</p>
      </div>
    """
    result = scrape_page("https://url-test.com")
    self.assertEqual(len(result), 1)

    data_expected = {
        "Title": "Product Test",
        "Price": "20",
        "Rating": "3.5",
        "Colors": "5",
        "Size": "L",
        "Gender": "Male"
    }

    for key in data_expected:
      self.assertEqual(result[0][key], data_expected[key])

  @patch("utils.extract_data.extract.requests.get")
  def test_invalid_url_page_scrape(self, mock_get):
    # Menguji Penanganan Scraping Data pada URL Tidak Valid
    mock_get.side_effect = requests.exceptions.RequestException("Error Connection, Try Again Later")
    result = scrape_page("https://url-invalid.com")
    self.assertEqual(result, [])

  @patch("utils.extract_data.extract.requests.get")
  def test_timeout_page_scrape(self, mock_get):
    # Menguji Penanganan Scraping Data saat Terjadi Timeout
    mock_get.side_effect = requests.exceptions.Timeout("Timeout Requested, Try Again Later")
    result = scrape_page("https://url-timeout.com")
    self.assertEqual(result, [])

  @patch("utils.extract_data.extract.requests.get")
  def test_products_none_page_scrape(self, mock_get):
    # Menguji Penanganan Scraping Data pada Halaman dengan Produk Tidak Tersedia
    mock_get.return_value.status_code = 200
    mock_get.return_value.text = "<div>Products Not Found, Back to Main Page</div>"
    result = scrape_page("https://url-page-empty.com")
    self.assertEqual(result, [])

  @patch("utils.extract_data.extract.requests.get")
  def test_elements_missing_page_scrape(self, mock_get):
    # Menguji Penanganan Scraping Data pada Halaman dengan Elemen Tidak Lengkap
    mock_get.return_value.status_code = 200
    mock_get.return_value.text = """
      <div class="collection-card">
        <h3 class="product-title">Products Incomplete</h3>
      </div>
    """
    result = scrape_page("https://url-elements-missing.com")
    self.assertEqual(len(result), 1)
    self.assertEqual(result[0]["Title"], "Products Incomplete")
    self.assertEqual(result[0]["Price"], "Price Unavailable")
    self.assertEqual(result[0]["Rating"], "Invalid Rating")
    self.assertEqual(result[0]["Colors"], "Colors Unavailable")
    self.assertEqual(result[0]["Size"], "Size Unavailable")
    self.assertEqual(result[0]["Gender"], "Gender Unavailable")

if __name__ == "__main__":
  unittest.main()