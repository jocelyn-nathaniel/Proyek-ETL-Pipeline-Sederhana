# -*- coding: utf-8 -*-
"""load_googlesheets_test

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tfE8DQQ8ZetOw0NeyCq3AANU1ptw3B2E
"""

import pandas as pd
import unittest
from unittest.mock import patch, MagicMock
from utils.load_data.load_googlesheets import saved_to_google_sheets

class TestLoadSheets(unittest.TestCase):

  @patch("utils.load_data.load_googlesheets.service_account.Credentials.from_service_account_file")
  @patch("utils.load_data.load_googlesheets.build")
  def test_suceeded_data_saved_sheets(self, mock_build, mock_cred):
    # Menguji Keberhasilan Data Disimpan ke dalam Google Sheets
    mock_service = MagicMock()
    mock_build.return_value = mock_service
    mock_cred.return_value = MagicMock()

    mock_sheet = mock_service.spreadsheets.return_value
    mock_values = mock_sheet.values.return_value
    mock_update = mock_values.update.return_value
    mock_update.execute.return_value = {"updatedCells": 10}

    df = pd.DataFrame({"A": [1], "B": [2]})
    response = saved_to_google_sheets(df)
    
    mock_update.execute.assert_called_once()
    self.assertEqual(response, {"updatedCells": 10})
    
    data = {
        "Title": ["Product A"],
        "Price": [320000],
        "Rating": [3.5],
        "Colors": [5],
        "Size": ["L"],
        "Gender": ["Male"]
    }
    df = pd.DataFrame(data)

    saved_to_google_sheets(df)

    self.assertEqual(mock_values.update.call_count, 2)

  @patch("utils.load_data.load_googlesheets.service_account.Credentials.from_service_account_file")
  @patch("utils.load_data.load_googlesheets.build")
  def test_error_api_data_saved_sheets(self, mock_build, mock_cred):
    # Menguji Penanganan Function pada Eror API dengan baik
    mock_service = MagicMock()
    mock_build.return_value = mock_service
    mock_cred.return_value = MagicMock()

    mock_sheet = mock_service.spreadsheets.return_value
    mock_values = mock_sheet.values.return_value
    mock_update = mock_values.update.return_value
    mock_update.execute.side_effect = Exception("API error")

    df = pd.DataFrame({"A": [1]})
    with self.assertLogs('utils.load_data.load_googlesheets', level='ERROR') as log:
        saved_to_google_sheets(df)
    self.assertTrue(any("Terjadi kesalahan" in message for message in log.output))

    data = {
        "Title": ["Product B"],
        "Price": [900000],
        "Rating": [4.8],
        "Colors": [3],
        "Size": ["M"],
        "Gender": ["Female"]
    }
    df = pd.DataFrame(data)

    with self.assertLogs(level="ERROR") as log:
      saved_to_google_sheets(df)
    self.assertTrue(any("Terjadi kesalahan saat menyimpan data ke Google Sheets" in message for message in log.output))

  @patch("utils.load_data.load_googlesheets.service_account.Credentials.from_service_account_file")
  @patch("utils.load_data.load_googlesheets.build")
  def test_empty_dataframe_data_saved_sheets(self, mock_build, mock_cred):
    # Menguji Penanganan Fungsi pada DataFrame dengan Baik
    mock_cred.return_value = MagicMock()

    mock_service = MagicMock()
    mock_sheets = MagicMock()
    mock_build.return_value.google_sheets.return_value = mock_sheets

    df = pd.DataFrame()

    with self.assertLogs('utils.load_data.load_googlesheets', level='WARNING') as log:
      saved_to_google_sheets(pd.DataFrame()) 
    self.assertTrue(any("DataFrame kosong" in message for message in log.output))

if __name__ == "__main__":
  unittest.main()